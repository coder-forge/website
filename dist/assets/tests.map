{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","coderforge-website/tests/acceptance/attend-test.js","coderforge-website/tests/acceptance/attend-test.jshint.lint-test.js","coderforge-website/tests/acceptance/home-page-test.js","coderforge-website/tests/acceptance/home-page-test.jshint.lint-test.js","coderforge-website/tests/app.jshint.lint-test.js","coderforge-website/tests/controllers/gallery.jshint.lint-test.js","coderforge-website/tests/helpers/destroy-app.js","coderforge-website/tests/helpers/destroy-app.jshint.lint-test.js","coderforge-website/tests/helpers/module-for-acceptance.js","coderforge-website/tests/helpers/module-for-acceptance.jshint.lint-test.js","coderforge-website/tests/helpers/resolver.js","coderforge-website/tests/helpers/resolver.jshint.lint-test.js","coderforge-website/tests/helpers/start-app.js","coderforge-website/tests/helpers/start-app.jshint.lint-test.js","coderforge-website/tests/resolver.jshint.lint-test.js","coderforge-website/tests/router.jshint.lint-test.js","coderforge-website/tests/routes/about.jshint.lint-test.js","coderforge-website/tests/routes/attend.jshint.lint-test.js","coderforge-website/tests/routes/gallery.jshint.lint-test.js","coderforge-website/tests/routes/index.jshint.lint-test.js","coderforge-website/tests/routes/organise.jshint.lint-test.js","coderforge-website/tests/test-helper.js","coderforge-website/tests/test-helper.jshint.lint-test.js","coderforge-website/tests/unit/controllers/gallery-test.js","coderforge-website/tests/unit/controllers/gallery-test.jshint.lint-test.js","coderforge-website/tests/unit/routes/about-test.js","coderforge-website/tests/unit/routes/about-test.jshint.lint-test.js","coderforge-website/tests/unit/routes/attend-test.js","coderforge-website/tests/unit/routes/attend-test.jshint.lint-test.js","coderforge-website/tests/unit/routes/gallery-test.js","coderforge-website/tests/unit/routes/gallery-test.jshint.lint-test.js","coderforge-website/tests/unit/routes/index-test.js","coderforge-website/tests/unit/routes/index-test.jshint.lint-test.js","coderforge-website/tests/unit/routes/organise-test.js","coderforge-website/tests/unit/routes/organise-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('coderforge-website/tests/acceptance/attend-test', ['exports', 'qunit', 'coderforge-website/tests/helpers/module-for-acceptance'], function (exports, _qunit, _coderforgeWebsiteTestsHelpersModuleForAcceptance) {\n\n    (0, _coderforgeWebsiteTestsHelpersModuleForAcceptance['default'])('Acceptance | attend');\n\n    (0, _qunit.test)('visiting /attend', function (assert) {\n        visit('/attend');\n\n        andThen(function () {\n            assert.equal(find('ul#event-list li:first dt.name:Contains(\"Name\")').length, 1);\n            assert.equal(find('ul#event-list li:first dt.host:Contains(\"Host\")').length, 1);\n            assert.equal(find('ul#event-list li:first dt.address:Contains(\"Address\")').length, 1);\n            assert.equal(find('ul#event-list li:first dt.time:Contains(\"Time\")').length, 1);\n            assert.equal(find('ul#event-list li.event').length, 20);\n            assert.equal(currentURL(), '/attend');\n        });\n    });\n});","define('coderforge-website/tests/acceptance/attend-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/attend-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/attend-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/acceptance/home-page-test', ['exports', 'qunit', 'coderforge-website/tests/helpers/module-for-acceptance'], function (exports, _qunit, _coderforgeWebsiteTestsHelpersModuleForAcceptance) {\n\n    (0, _coderforgeWebsiteTestsHelpersModuleForAcceptance['default'])('Acceptance | home page');\n\n    (0, _qunit.test)('visiting /', function (assert) {\n        visit('/');\n\n        andThen(function () {\n            assert.equal(currentURL(), '/');\n        });\n    });\n\n    (0, _qunit.test)('loads content', function (assert) {\n        visit('/');\n\n        andThen(function () {\n\n            // test header\n            assert.equal(find('nav#header').length, 1, 'load header container element');\n            assert.equal(find('nav#header img#logo').length, 1, 'load header logo');\n            assert.equal(find('ul#pages-list > li').length, 3, 'load header pages links');\n            // test links to micro services\n            assert.equal(find('ul#mircoservices-list > li').length, 3, 'load microservices list');\n        });\n    });\n\n    (0, _qunit.test)('header link to Organise', function (assert) {\n        visit('/');\n        click('a:contains(\"Organise\")');\n        andThen(function () {\n            assert.equal(currentURL(), '/organise');\n        });\n    });\n\n    (0, _qunit.test)('header link to Attend', function (assert) {\n        visit('/');\n        click('a:contains(\"Attend\")');\n        andThen(function () {\n            assert.equal(currentURL(), '/attend');\n        });\n    });\n\n    (0, _qunit.test)('header link to About', function (assert) {\n        visit('/');\n        click('a:contains(\"About\")');\n        andThen(function () {\n            assert.equal(currentURL(), '/about');\n        });\n    });\n\n    // .mircoservices-list\n    (0, _qunit.test)('microservice list links', function (assert) {\n        visit('/');\n        andThen(function () {\n            assert.equal(find('ul#mircoservices-list li a').length, 3);\n        });\n    });\n});","define('coderforge-website/tests/acceptance/home-page-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/home-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/home-page-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/controllers/gallery.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/gallery.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/gallery.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('coderforge-website/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'coderforge-website/tests/helpers/start-app', 'coderforge-website/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _coderforgeWebsiteTestsHelpersStartApp, _coderforgeWebsiteTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _coderforgeWebsiteTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _coderforgeWebsiteTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('coderforge-website/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/helpers/resolver', ['exports', 'coderforge-website/resolver', 'coderforge-website/config/environment'], function (exports, _coderforgeWebsiteResolver, _coderforgeWebsiteConfigEnvironment) {\n\n  var resolver = _coderforgeWebsiteResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _coderforgeWebsiteConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _coderforgeWebsiteConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('coderforge-website/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/helpers/start-app', ['exports', 'ember', 'coderforge-website/app', 'coderforge-website/config/environment'], function (exports, _ember, _coderforgeWebsiteApp, _coderforgeWebsiteConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _coderforgeWebsiteConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _coderforgeWebsiteApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('coderforge-website/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/routes/about.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/about.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/routes/attend.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/attend.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/attend.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/routes/gallery.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/gallery.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gallery.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/routes/organise.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/organise.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/organise.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/test-helper', ['exports', 'coderforge-website/tests/helpers/resolver', 'ember-qunit'], function (exports, _coderforgeWebsiteTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_coderforgeWebsiteTestsHelpersResolver['default']);\n});","define('coderforge-website/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/controllers/gallery-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:gallery', 'Unit | Controller | gallery', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('coderforge-website/tests/unit/controllers/gallery-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/gallery-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/gallery-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('coderforge-website/tests/unit/routes/about-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/routes/attend-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:attend', 'Unit | Route | attend', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('coderforge-website/tests/unit/routes/attend-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/attend-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/attend-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/routes/gallery-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gallery', 'Unit | Route | gallery', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('coderforge-website/tests/unit/routes/gallery-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/gallery-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gallery-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('coderforge-website/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('coderforge-website/tests/unit/routes/organise-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:organise', 'Unit | Route | organise', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('coderforge-website/tests/unit/routes/organise-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/organise-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/organise-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('coderforge-website/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}